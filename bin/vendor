#!/usr/bin/env ruby
require "rubygems"

require "thor"
require "ripl"

$:.push File.expand_path(File.join(__FILE__, "..", "..", "lib"))

require "vendor"
require "vendor/cli"

class VendorKit::App < Thor

  desc "auth", "Login to your vendorage.com account"
  def auth
    begin
      VendorKit::CLI::Auth.with_api_key do |api_key|
        puts "Successfully authenticated".green
      end
    rescue VendorKit::API::Error => e
      puts "Error: #{e.message}".red
    end
  end

  desc "build MANIFEST_FILE", "Build a vendor package from a vendorspec file"
  def build(file)
    builder = VendorKit::Manifest::Builder.new(File.expand_path(file))
    if builder.build
      puts "Successfully built Vendor".green
      puts "Name: #{builder.name}"
      puts "Version: #{builder.version}"
      puts "File: #{builder.filename}"
    end
  end

  desc "publish VENDOR_FILE", "Publish a vendor package to vendorage.com"
  def publish(file)
    begin
      VendorKit::CLI::Auth.with_api_key do |api_key|
        url = VendorKit::API.publish :file => File.expand_path(file), :api_key => api_key
        puts "Successfully published to #{url}".green
      end
    rescue VendorKit::API::Error => e
      puts "Error: #{e.message}".red
    end
  end

  desc "console", "Load an interactive shell with the VendorKit classes loaded"
  def console
    # Need to clear the arguments otherwise they are passed through to RIPL
    ARGV.clear
    Ripl.start :binding => VendorKit::CLI.instance_eval{ binding }
  end

  # Exit with 1 if thor encounters an error (such as command missing)
  def self.exit_on_failure?
    true
  end

end

VendorKit::App.start
